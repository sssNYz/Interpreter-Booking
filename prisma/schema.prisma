generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BookingPlan {
  bookingId                  Int                    @id @default(autoincrement()) @map("BOOKING_ID")
  ownerGroup                 OwnerGroup             @map("OWNER_GROUP")
  meetingRoom                String                 @map("MEETING_ROOM") @db.VarChar(50)
  meetingDetail              String?                @map("MEETING_DETAIL") @db.Text
  timeStart                  DateTime               @map("TIME_START") @db.DateTime(0)
  timeEnd                    DateTime               @map("TIME_END") @db.DateTime(0)
  bookingStatus              BookingStatus          @default(waiting) @map("BOOKING_STATUS")
  createdAt                  DateTime               @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                  DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  drType                     DRType?                @map("DR_TYPE")
  otherType                  String?                @map("OTHER_TYPE") @db.VarChar(255)
  otherTypeScope             OtherTypeScope?        @map("OTHER_TYPE_SCOPE")
  applicableModel            String?                @map("APPLICABLE_MODEL") @db.VarChar(255)
  interpreterEmpCode         String?                @map("INTERPRETER_EMP_CODE") @db.VarChar(64)
  isRecurring                Boolean                @default(false) @map("IS_RECURRING")
  meetingType                MeetingType            @map("MEETING_TYPE")
  ownerEmpCode               String                 @map("OWNER_EMP_CODE") @db.VarChar(64)
  parentBookingId            Int?                   @map("PARENT_BOOKING_ID")
  recurrenceEndDate          DateTime?              @map("RECURRENCE_END_DATE") @db.DateTime(0)
  recurrenceEndOccurrences   Int?                   @map("RECURRENCE_END_OCCURRENCES")
  recurrenceEndType          EndType?               @map("RECURRENCE_END_TYPE")
  recurrenceInterval         Int?                   @map("RECURRENCE_INTERVAL")
  recurrenceMonthday         Int?                   @map("RECURRENCE_MONTHDAY")
  recurrenceType             RecurrenceType?        @map("RECURRENCE_TYPE")
  recurrenceWeekdays         String?                @map("RECURRENCE_WEEKDAYS") @db.VarChar(32)
  recurrenceWeekOrder        WeekOrder?             @map("RECURRENCE_WEEK_ORDER")
  forwardedByEmpCode         String?                @map("FORWARDED_BY_EMP_CODE") @db.VarChar(64)
  isForwarded                Boolean                @default(false) @map("IS_FORWARDED")
  forwardActions             Json                   @map("FORWARD_ACTIONS")
  languageCode               String?                @map("LANGUAGE_CODE") @db.VarChar(16)
  chairmanEmail              String?                @map("CHAIRMAN_EMAIL") @db.VarChar(255)
  selectedInterpreterEmpCode String?                @map("SELECTED_INTERPRETER_EMP_CODE") @db.VarChar(64)
  autoAssignAt               DateTime?              @map("AUTO_ASSIGN_AT") @db.DateTime(0)
  autoAssignAttempts         Int                    @default(0) @map("AUTO_ASSIGN_ATTEMPTS")
  autoAssignLockedAt         DateTime?              @map("AUTO_ASSIGN_LOCKED_AT") @db.DateTime(0)
  autoAssignLockedBy         String?                @map("AUTO_ASSIGN_LOCKED_BY") @db.VarChar(64)
  autoAssignStatus           String                 @default("pending") @map("AUTO_ASSIGN_STATUS") @db.VarChar(16)
  assignmentLogs             AssignmentLog[]
  forwardTargets             BookingForwardTarget[]
  forwardedByEmployee        Employee?              @relation("ForwardedByEmployee", fields: [forwardedByEmpCode], references: [empCode])
  interpreterEmployee        Employee?              @relation("InterpreterEmployee", fields: [interpreterEmpCode], references: [empCode])
  language                   Language?              @relation(fields: [languageCode], references: [code])
  employee                   Employee               @relation("OwnerEmployee", fields: [ownerEmpCode], references: [empCode])
  parentBooking              BookingPlan?           @relation("RecurringBookings", fields: [parentBookingId], references: [bookingId])
  recurringBookings          BookingPlan[]          @relation("RecurringBookings")
  selectedInterpreter        Employee?              @relation("SelectedInterpreterEmployee", fields: [selectedInterpreterEmpCode], references: [empCode])
  inviteEmails               InviteEmailList[]

  @@index([ownerEmpCode])
  @@index([interpreterEmpCode])
  @@index([parentBookingId])
  @@index([drType])
  @@index([otherTypeScope])
  @@index([forwardedByEmpCode])
  @@index([languageCode])
  @@index([chairmanEmail])
  @@index([selectedInterpreterEmpCode])
  @@index([autoAssignStatus, autoAssignAt])
  @@map("BOOKING_PLAN")
}

model BookingForwardTarget {
  bookingId     Int         @map("BOOKING_ID")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  environmentId Int         @map("ENVIRONMENT_ID")
  booking       BookingPlan @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@id([bookingId, environmentId])
  @@index([environmentId])
  @@map("BOOKING_FORWARD_TARGET")
}

model Language {
  id           Int                   @id @default(autoincrement()) @map("ID")
  code         String                @unique @map("CODE") @db.VarChar(16)
  name         String                @unique @map("NAME") @db.VarChar(128)
  isActive     Boolean               @default(true) @map("IS_ACTIVE")
  createdAt    DateTime              @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  bookings     BookingPlan[]
  interpreters InterpreterLanguage[]

  @@map("LANGUAGE")
}

model InterpreterLanguage {
  id           Int      @id @default(autoincrement()) @map("ID")
  empCode      String   @map("EMP_CODE") @db.VarChar(64)
  languageCode String   @map("LANGUAGE_CODE") @db.VarChar(16)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  employee     Employee @relation(fields: [empCode], references: [empCode])
  language     Language @relation(fields: [languageCode], references: [code])

  @@unique([empCode, languageCode], name: "unique_emp_language")
  @@index([empCode])
  @@index([languageCode])
  @@map("INTERPRETER_LANGUAGE")
}

model InviteEmailList {
  emailListId Int         @id @default(autoincrement()) @map("EMAIL_LIST_ID")
  bookingId   Int         @map("BOOKING_ID")
  email       String      @map("EMAIL") @db.VarChar(255)
  invitedAt   DateTime    @default(now()) @map("invited_at") @db.Timestamp(0)
  bookingPlan BookingPlan @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)

  @@unique([bookingId, email], name: "unique_booking_email")
  @@map("INVITE_EMAIL_LIST")
}

model Employee {
  id                            Int                      @id @default(autoincrement()) @map("ID")
  empCode                       String                   @unique @map("EMP_CODE") @db.VarChar(64)
  prefixEn                      String?                  @map("PREFIX_EN") @db.VarChar(32)
  firstNameEn                   String?                  @map("FIRST_NAME_EN") @db.VarChar(255)
  lastNameEn                    String?                  @map("LAST_NAME_EN") @db.VarChar(255)
  prefixTh                      String?                  @map("PREFIX_TH") @db.VarChar(32)
  firstNameTh                   String?                  @map("FIRST_NAME_TH") @db.VarChar(255)
  lastNameTh                    String?                  @map("LAST_NAME_TH") @db.VarChar(255)
  fno                           String?                  @map("FNO") @db.VarChar(64)
  deptPath                      String?                  @map("DEPT_PATH") @db.VarChar(512)
  positionTitle                 String?                  @map("POSITION_TITLE") @db.VarChar(255)
  email                         String?                  @map("EMAIL") @db.VarChar(255)
  telExt                        String?                  @map("TEL_EXT") @db.VarChar(64)
  isActive                      Boolean                  @default(true) @map("IS_ACTIVE")
  lastLoginAt                   DateTime?                @map("LAST_LOGIN_AT")
  syncedAt                      DateTime?                @map("SYNCED_AT")
  createdAt                     DateTime                 @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                     DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  ADMIN_VISION                  ADMIN_VISION[]
  assignmentLogs                AssignmentLog[]          @relation("AssignmentLogInterpreter")
  bookingsForwarded             BookingPlan[]            @relation("ForwardedByEmployee")
  bookingsAsInterpreter         BookingPlan[]            @relation("InterpreterEmployee")
  bookingsOwned                 BookingPlan[]            @relation("OwnerEmployee")
  bookingsSelectedAsInterpreter BookingPlan[]            @relation("SelectedInterpreterEmployee")
  environmentAdminLinks         EnvironmentAdmin[]       @relation("EmployeeEnvironmentAdmin")
  environmentInterpreterLinks   EnvironmentInterpreter[] @relation("EmployeeEnvironmentInterpreter")
  interpreterLanguages          InterpreterLanguage[]
  userRoles                     UserRole[]

  @@map("EMPLOYEE")
}

model UserRole {
  userId   Int      @map("USER_ID")
  roleCode RoleCode @map("ROLE_CODE")
  employee Employee @relation(fields: [userId], references: [id])

  @@id([userId, roleCode])
  @@map("USER_ROLE")
}

model AutoAssignmentConfig {
  id                   Int      @id @default(autoincrement()) @map("ID")
  autoAssignEnabled    Boolean  @default(true) @map("AUTO_ASSIGN_ENABLED")
  mode                 String   @default("NORMAL") @map("MODE")
  fairnessWindowDays   Int      @default(30) @map("FAIRNESS_WINDOW_DAYS")
  maxGapHours          Int      @default(10) @map("MAX_GAP_HOURS")
  MIN_ADVANCE_DAYS     Int      @default(2)
  w_fair               Float    @default(1.2) @map("W_FAIR")
  w_urgency            Float    @default(0.5) @map("W_URGENCY")
  w_lrs                Float    @default(0.3) @map("W_LRS")
  drConsecutivePenalty Float    @default(-0.7) @map("DR_CONSECUTIVE_PENALTY")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  dailyRunTimes        String?  @map("DAILY_RUN_TIMES") @db.VarChar(255)
  pollIntervalMinutes  Int      @default(180) @map("POLL_INTERVAL_MINUTES")
  timezone             String?  @map("TIMEZONE") @db.VarChar(64)

  @@map("AUTO_ASSIGNMENT_CONFIG")
}

model MeetingTypePriority {
  id                   Int          @id @default(autoincrement()) @map("ID")
  meetingType          MeetingType  @unique @map("MEETING_TYPE")
  priorityValue        Int          @map("PRIORITY_VALUE")
  urgentThresholdDays  Int          @map("URGENT_THRESHOLD_DAYS")
  generalThresholdDays Int          @map("GENERAL_THRESHOLD_DAYS")
  createdAt            DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)
  environmentId        Int?         @map("ENVIRONMENT_ID")
  environment          Environment? @relation(fields: [environmentId], references: [id])

  @@index([environmentId], map: "MEETING_TYPE_PRIORITY_ENVIRONMENT_ID_fkey")
  @@map("MEETING_TYPE_PRIORITY")
}

model MeetingTypeModeThreshold {
  id                   Int         @id @default(autoincrement()) @map("ID")
  meetingType          MeetingType @map("MEETING_TYPE")
  assignmentMode       String      @map("ASSIGNMENT_MODE") @db.VarChar(20)
  urgentThresholdDays  Int         @map("URGENT_THRESHOLD_DAYS")
  generalThresholdDays Int         @map("GENERAL_THRESHOLD_DAYS")
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  @@unique([meetingType, assignmentMode])
  @@map("MEETING_TYPE_MODE_THRESHOLD")
}

model EnvironmentAssignmentConfig {
  id                   Int         @id @default(autoincrement()) @map("ID")
  environmentId        Int         @unique @map("ENVIRONMENT_ID")
  mode                 String?     @map("MODE") @db.VarChar(32)
  autoAssignEnabled    Boolean?    @map("AUTO_ASSIGN_ENABLED")
  fairnessWindowDays   Int?        @map("FAIRNESS_WINDOW_DAYS")
  maxGapHours          Int?        @map("MAX_GAP_HOURS")
  w_fair               Float?      @map("W_FAIR")
  w_urgency            Float?      @map("W_URGENCY")
  w_lrs                Float?      @map("W_LRS")
  drConsecutivePenalty Float?      @map("DR_CONSECUTIVE_PENALTY")
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  environment          Environment @relation(fields: [environmentId], references: [id])

  @@map("ENVIRONMENT_ASSIGNMENT_CONFIG")
}

model AssignmentLog {
  id                  Int         @id @default(autoincrement()) @map("ID")
  bookingId           Int         @map("BOOKING_ID")
  interpreterEmpCode  String?     @map("INTERPRETER_EMP_CODE") @db.VarChar(64)
  status              String      @map("STATUS") @db.VarChar(32)
  reason              String?     @map("REASON") @db.Text
  preHoursSnapshot    Json        @map("PRE_HOURS_SNAPSHOT")
  postHoursSnapshot   Json?       @map("POST_HOURS_SNAPSHOT")
  scoreBreakdown      Json?       @map("SCORE_BREAKDOWN")
  maxGapHours         Int         @map("MAX_GAP_HOURS")
  fairnessWindowDays  Int         @map("FAIRNESS_WINDOW_DAYS")
  conflictDetection   Json?       @map("CONFLICT_DETECTION")
  drPolicyDecision    Json?       @map("DR_POLICY_DECISION")
  performance         Json?       @map("PERFORMANCE")
  systemState         Json?       @map("SYSTEM_STATE")
  createdAt           DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  bookingPlan         BookingPlan @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  interpreterEmployee Employee?   @relation("AssignmentLogInterpreter", fields: [interpreterEmpCode], references: [empCode])

  @@index([bookingId])
  @@index([interpreterEmpCode])
  @@index([status])
  @@map("ASSIGNMENT_LOG")
}

model ConflictDetectionLog {
  id                       Int      @id @default(autoincrement()) @map("ID")
  timestamp                DateTime @map("TIMESTAMP") @db.DateTime(0)
  bookingId                Int      @map("BOOKING_ID")
  requestedTimeStart       DateTime @map("REQUESTED_TIME_START") @db.DateTime(0)
  requestedTimeEnd         DateTime @map("REQUESTED_TIME_END") @db.DateTime(0)
  totalInterpretersChecked Int      @map("TOTAL_INTERPRETERS_CHECKED")
  availableInterpreters    Int      @map("AVAILABLE_INTERPRETERS")
  conflictedInterpreters   Int      @map("CONFLICTED_INTERPRETERS")
  conflicts                Json     @map("CONFLICTS")
  processingTimeMs         Int      @map("PROCESSING_TIME_MS")
  resolutionStrategy       String   @map("RESOLUTION_STRATEGY") @db.VarChar(64)
  outcome                  String   @map("OUTCOME") @db.VarChar(32)
  createdAt                DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([bookingId])
  @@index([timestamp])
  @@index([outcome])
  @@map("CONFLICT_DETECTION_LOG")
}

model DRPolicyLog {
  id                      Int      @id @default(autoincrement()) @map("ID")
  timestamp               DateTime @map("TIMESTAMP") @db.DateTime(0)
  bookingId               Int      @map("BOOKING_ID")
  interpreterId           String   @map("INTERPRETER_ID") @db.VarChar(64)
  isDRMeeting             Boolean  @map("IS_DR_MEETING")
  drType                  String?  @map("DR_TYPE") @db.VarChar(64)
  mode                    String   @map("MODE") @db.VarChar(32)
  policyApplied           Json     @map("POLICY_APPLIED")
  lastGlobalDR            Json?    @map("LAST_GLOBAL_DR")
  drHistory               Json     @map("DR_HISTORY")
  alternativeInterpreters Int      @map("ALTERNATIVE_INTERPRETERS")
  finalDecision           String   @map("FINAL_DECISION") @db.VarChar(32)
  decisionRationale       String   @map("DECISION_RATIONALE") @db.Text
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([bookingId])
  @@index([interpreterId])
  @@index([timestamp])
  @@index([finalDecision])
  @@map("DR_POLICY_LOG")
}

model SystemErrorLog {
  id           Int      @id @default(autoincrement()) @map("ID")
  timestamp    DateTime @map("TIMESTAMP") @db.DateTime(0)
  operation    String   @map("OPERATION") @db.VarChar(128)
  bookingId    Int?     @map("BOOKING_ID")
  errorName    String   @map("ERROR_NAME") @db.VarChar(128)
  errorMessage String   @map("ERROR_MESSAGE") @db.Text
  errorStack   String?  @map("ERROR_STACK") @db.Text
  context      Json?    @map("CONTEXT")
  systemState  Json?    @map("SYSTEM_STATE")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([timestamp])
  @@index([operation])
  @@index([bookingId])
  @@index([errorName])
  @@map("SYSTEM_ERROR_LOG")
}

model Environment {
  id                Int                          @id @default(autoincrement()) @map("ID")
  name              String                       @unique @map("NAME") @db.VarChar(128)
  isActive          Boolean                      @default(true) @map("IS_ACTIVE")
  createdAt         DateTime                     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime                     @updatedAt @map("updated_at") @db.Timestamp(0)
  forwardTargets    BookingForwardTarget[]
  admins            EnvironmentAdmin[]
  assignmentConfigs EnvironmentAssignmentConfig?
  centers           EnvironmentCenter[]
  interpreters      EnvironmentInterpreter[]
  priorities        MeetingTypePriority[]

  @@map("ENVIRONMENT")
}

model EnvironmentCenter {
  id            Int         @id @default(autoincrement()) @map("ID")
  environmentId Int         @map("ENVIRONMENT_ID")
  center        String      @unique @map("CENTER") @db.VarChar(128)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@index([environmentId])
  @@map("ENVIRONMENT_CENTER")
}

model EnvironmentAdmin {
  id            Int         @id @default(autoincrement()) @map("ID")
  environmentId Int         @map("ENVIRONMENT_ID")
  adminEmpCode  String      @map("ADMIN_EMP_CODE") @db.VarChar(64)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  admin         Employee    @relation("EmployeeEnvironmentAdmin", fields: [adminEmpCode], references: [empCode])
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([environmentId, adminEmpCode], name: "unique_env_admin")
  @@index([adminEmpCode])
  @@map("ENVIRONMENT_ADMIN")
}

model EnvironmentInterpreter {
  id                 Int         @id @default(autoincrement()) @map("ID")
  environmentId      Int         @map("ENVIRONMENT_ID")
  interpreterEmpCode String      @map("INTERPRETER_EMP_CODE") @db.VarChar(64)
  createdAt          DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  environment        Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  interpreter        Employee    @relation("EmployeeEnvironmentInterpreter", fields: [interpreterEmpCode], references: [empCode])

  @@unique([environmentId, interpreterEmpCode], name: "unique_env_interpreter")
  @@index([interpreterEmpCode])
  @@map("ENVIRONMENT_INTERPRETER")
}

model Room {
  id        Int      @id @default(autoincrement()) @map("ID")
  name      String   @unique(map: "UK_ROOM_NAME") @map("NAME") @db.VarChar(128)
  location  String?  @map("LOCATION") @db.VarChar(255)
  capacity  Int      @default(1) @map("CAPACITY")
  isActive  Boolean  @default(true) @map("IS_ACTIVE")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("ROOM")
}

model ADMIN_VISION {
  ID             Int      @id @default(autoincrement())
  ADMIN_EMP_CODE String   @db.VarChar(64)
  DEPT_PATH      String   @db.VarChar(512)
  created_at     DateTime @default(now()) @db.Timestamp(0)
  EMPLOYEE       Employee @relation(fields: [ADMIN_EMP_CODE], references: [empCode])

  @@unique([ADMIN_EMP_CODE, DEPT_PATH])
  @@index([ADMIN_EMP_CODE])
}

enum DRType {
  DR_PR @map("DR-PR")
  DR_k  @map("DR-k")
  DR_II @map("DR-II")
  DR_I  @map("DR-I")
  Other @map("Other")

  @@map("dr_type")
}

enum OtherTypeScope {
  meeting_type
  dr_type

  @@map("other_type_scope")
}

enum OwnerGroup {
  iot
  hardware
  software
  other

  @@map("owner_group")
}

enum MeetingType {
  DR
  VIP
  Weekly
  General
  Urgent
  President
  Other
}

enum BookingStatus {
  approve
  cancel
  waiting
  complet

  @@map("booking_status")
}

enum RecurrenceType {
  daily
  weekly
  biweekly
  monthly
  custom
}

enum EndType {
  never
  on_date
  after_occurrences
}

enum WeekOrder {
  first
  second
  third
  fourth
  last
}

enum RoleCode {
  ADMIN
  INTERPRETER
  SUPER_ADMIN
}
